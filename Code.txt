Index.html

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TTH Messenger</title>
  <link rel="stylesheet" href="css/style.css">
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f4f4f4;
      color: #333;
      margin: 0;
      padding: 0;
    }

    header {
      background-color: #0088cc; /* Телеграммовский синий */
      color: white;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 15px;
    }

    #profile-pic-container {
      display: flex;
      align-items: center;
    }

    #profile-pic {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      margin-right: 10px;
      border: 2px solid #fff;
    }

    h1 {
      font-size: 24px;
      margin: 0;
    }

    #settings-icon {
      font-size: 20px;
      cursor: pointer;
    }

    /* Стиль для шапки профиля */
    #profile-header {
      background-color: white;
      max-width: 500px;
      margin: 20px auto;
      padding: 20px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      text-align: center;
    }

    #profile-banner {
      width: 100%;
      border-radius: 8px;
    }

    #profile-pic {
      width: 80px;
      height: 80px;
    }

    #username {
      margin-top: 10px;
      font-size: 20px;
      color: #333;
    }

    /* Стиль для постов */
    #posts-section {
      margin: 20px auto;
      max-width: 500px;
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    #post-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      resize: none;
      margin-bottom: 10px;
    }

    #publish-post {
      background-color: #0088cc;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    /* Чат */
    #chat-container {
      margin: 20px auto;
      max-width: 500px;
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    #chat-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      margin-bottom: 10px;
    }

    #send-message {
      background-color: #0088cc;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    /* Кнопки нижнего меню */
    #bottom-menu {
      position: fixed;
      bottom: 0;
      width: 100%;
      display: flex;
      justify-content: space-around;
      background-color: #fff;
      border-top: 1px solid #ccc;
      padding: 10px 0;
    }

    #bottom-menu button {
      background: none;
      border: none;
      font-size: 18px;
      cursor: pointer;
      color: #0088cc;
    }

    #bottom-menu button:focus {
      outline: none;
    }

    @media (max-width: 768px) {
      header {
        font-size: 18px;
      }

      #profile-header {
        padding: 10px;
      }

      #post-input, #chat-input {
        padding: 8px;
      }

      #publish-post, #send-message {
        padding: 8px 15px;
      }

      #bottom-menu button {
        font-size: 16px;
      }
    }
  </style>
</head>
<body>
  <header>
    <div id="profile-pic-container">
      <img id="profile-pic" src="images/default-avatar.png" alt="Аватарка пользователя">
      <h1>TTH Messenger</h1>
    </div>
    <div id="settings-icon" aria-label="Настройки">&#9881;</div>
  </header>

  <main>
    <div id="profile-header">
      <img id="profile-banner-img" src="images/default-banner.jpg" alt="Шапка профиля">
      <img id="profile-pic" src="images/default-avatar.png" alt="Аватарка пользователя">
      <h2 id="username">Имя Пользователя</h2>
    </div>

    <section id="posts-section">
      <textarea id="post-input" placeholder="Напишите свой пост здесь..." aria-label="Поле для поста"></textarea>
      <button id="publish-post">Опубликовать</button>
      <div id="posts-container"></div>
    </section>

    <div id="chat-container" aria-hidden="true">
      <input type="text" id="chat-input" placeholder="Напишите сообщение..." aria-label="Поле для чата">
      <button id="send-message">Отправить</button>
    </div>
  </main>

  <div id="bottom-menu">
    <button id="open-chats" aria-label="Открыть чаты">Чаты</button>
    <button id="open-channels" aria-label="Открыть каналы">Каналы</button>
  </div>

  <script src="js/app.js"></script>
</body>
</html>

style.css

/* Стили для модального окна */
.modal {
  display: none; /* Скрываем по умолчанию */
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
  background-color: #fff;
  margin: 10% auto;
  padding: 20px;
  border-radius: 10px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.close {
  color: #888;
  float: right;
  font-size: 24px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
}

/* Основные стили */
body {
  font-family: 'Roboto', sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: #f5f7fa;
  color: #333;
}

header {
  width: 100%;
  padding: 15px;
  background-color: #0066cc;
  color: white;
  text-align: center;
  font-size: 1.5em;
  position: relative;
}

#profile-pic-container {
  position: absolute;
  top: 15px;
  left: 15px;
}

#profile-pic {
  width: 45px;
  height: 45px;
  border-radius: 50%;
  cursor: pointer;
}

#back-profile,
#back-settings {
  margin-bottom: 15px;
  padding: 12px;
  background-color: #e0e0e0;
  border: none;
  border-radius: 8px;
  cursor: pointer;
}

#settings-icon {
  position: absolute;
  top: 15px;
  right: 15px;
  font-size: 26px;
  cursor: pointer;
  color: white;
}

#profile-container {
  width: 100%;
  max-width: 500px;
  margin-top: 20px;
  padding: 20px;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

#profile-header {
  margin-bottom: 15px;
}

#username {
  font-size: 24px;
  margin: 15px 0;
  font-weight: bold;
}

#edit-profile {
  padding: 12px;
  background-color: #0066cc;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s;
}

#edit-profile:hover {
  background-color: #005bb5;
}

#profile-info p {
  margin: 8px 0;
  font-size: 14px;
  color: #555;
}

/* Раздел постов и каналов */
#posts-section,
#channels-section,
#chat-container,
#post-container,
#voice-message-container {
  width: 100%;
  max-width: 500px;
  margin-top: 20px;
  text-align: center;
}

.channel-avatar {
  width: 35px;
  height: 35px;
  border-radius: 50%;
  margin-right: 10px;
}

.channel-item {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
  background-color: #f9f9f9;
  padding: 10px;
  border-radius: 8px;
}

.channel-post {
  margin-left: 50px;
  margin-top: 8px;
  padding: 10px;
  background-color: #ececec;
  border-radius: 8px;
}

#chat-box {
  width: 100%;
  height: 350px;
  border: 1px solid #ccc;
  padding: 15px;
  overflow-y: scroll;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
}

#chat-input,
#post-input {
  width: 85%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 6px;
  margin-top: 10px;
}

#send-message,
#publish-post,
#add-channel {
  padding: 12px;
  background-color: #0066cc;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  margin-top: 10px;
  transition: background-color 0.3s;
}

#send-message:hover,
#publish-post:hover,
#add-channel:hover {
  background-color: #005bb5;
}

/* Стили для галереи изображений */
.image-gallery {
  display: flex;
  flex-wrap: wrap;
  margin-top: 15px;
}

.image-gallery img {
  width: 90px;
  height: 90px;
  object-fit: cover;
  margin: 8px;
  border-radius: 6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.file-link {
  margin-top: 12px;
  text-decoration: none;
  color: #0066cc;
  word-break: break-all;
}

/* Стили для голосовых сообщений */
#voice-messages-list {
  margin-top: 15px;
  display: flex;
  flex-direction: column;
}

.voice-message {
  margin: 10px 0;
  padding: 10px;
  background-color: #ececec;
  border-radius: 8px;
}

aside {
  position: fixed;
  top: 0;
  right: 0;
  width: 300px;
  height: 100%;
  background-color: #f0f0f0;
  padding: 20px;
  display: none;
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
}

aside.active {
  display: block;
}

.dark-theme {
  background-color: #333;
  color: #fff;
}

.dark-theme #chat-box {
  background-color: #444;
}

.dark-theme #send-message,
.dark-theme #publish-post,
.dark-theme #add-channel {
  background-color: #0056b3;
}

/* Медиа запросы для мобильных устройств */
@media (max-width: 600px) {
  #chat-input,
  #post-input {
    width: 100%;
  }

  #send-message,
  #publish-post,
  #add-channel {
    width: 100%;
    margin-top: 8px;
  }

  .image-gallery img {
    width: 70px;
    height: 70px;
  }

  #profile-container {
    padding: 15px;
  }

  header {
    font-size: 1.2em;
    padding: 10px;
  }
}

app.js

// Получите кнопки "Назад"
const backProfileButton = document.getElementById('back-profile');
const backSettingsButton = document.getElementById('back-settings');

// Получите элементы, которые нужно скрыть
const profileMenu = document.getElementById('profile-menu');
const settingsMenu = document.getElementById('settings-menu');
const mainSection = document.querySelector('main'); // или ваш главный контейнер

// Функция для показа главного экрана
function showMainScreen() {
    profileMenu.style.display = 'none';
    settingsMenu.style.display = 'none';
    mainSection.style.display = 'block'; // Покажите главный экран
}

// Обработчики событий для кнопок "Назад"
backProfileButton.addEventListener('click', showMainScreen);
backSettingsButton.addEventListener('click', showMainScreen);

// Функция для открытия профиля
function openProfile() {
    mainSection.style.display = 'none'; // Скрыть главный экран
    profileMenu.style.display = 'block'; // Показать меню профиля
}

// Функция для открытия настроек
function openSettings() {
    mainSection.style.display = 'none'; // Скрыть главный экран
    settingsMenu.style.display = 'block'; // Показать меню настроек
}

// Пример, как можно добавить обработку кнопок
document.getElementById('settings-icon').addEventListener('click', openSettings);
document.getElementById('profile-pic').addEventListener('click', openProfile);

// Добавьте дополнительные функции для работы с чатами, постами и каналами здесь

auth.js

document.addEventListener('DOMContentLoaded', () => {
  const logoutButton = document.getElementById('logout');

  logoutButton.addEventListener('click', () => {
    // Simple logout functionality
    alert('You have been logged out.');
    window.location.reload();
  });
});

channels.js

// channels.js
document.addEventListener('DOMContentLoaded', () => {
  const channelsList = document.getElementById('channels-list');
  const addChannelButton = document.getElementById('add-channel');
  const channelNameInput = document.getElementById('new-channel-name');
  const channelAvatarInput = document.getElementById('new-channel-avatar');

  addChannelButton.addEventListener('click', () => {
    const channelName = channelNameInput.value;
    const channelAvatar = channelAvatarInput.files[0];

    if (channelName) {
      const channel = document.createElement('li');
      channel.classList.add('channel-item');

      // Create channel avatar
      const avatar = document.createElement('img');
      const reader = new FileReader();

      reader.onload = function(e) {
        avatar.src = e.target.result;
        avatar.alt = `${channelName} Avatar`;
        avatar.classList.add('channel-avatar');
        channel.appendChild(avatar);
      };

      if (channelAvatar) {
        reader.readAsDataURL(channelAvatar);
      } else {
        avatar.src = 'images/default-channel-avatar.png'; // default avatar
      }

      // Create channel name
      const name = document.createElement('span');
      name.textContent = channelName;
      channel.appendChild(name);

      // Create post input for channel
      const postInput = document.createElement('textarea');
      postInput.placeholder = 'Write a message to this channel...';
      channel.appendChild(postInput);

      const sendPostButton = document.createElement('button');
      sendPostButton.textContent = 'Send Post';
      channel.appendChild(sendPostButton);

      // Add post functionality
      sendPostButton.addEventListener('click', () => {
        const postContent = postInput.value;
        if (postContent) {
          const post = document.createElement('div');
          post.classList.add('channel-post');
          post.textContent = postContent;
          channel.appendChild(post);
          postInput.value = '';
        }
      });

      channelsList.appendChild(channel);
      channelNameInput.value = '';
      channelAvatarInput.value = '';
    } else {
      alert('Please enter a channel name.');
    }
  });
});

chat.js

document.addEventListener('DOMContentLoaded', () => {
  const chatBox = document.getElementById('chat-box');
  const chatInput = document.getElementById('chat-input');
  const sendMessageButton = document.getElementById('send-message');
  const fileInput = document.getElementById('file-input');
  const userNickname = "Твой Ник";

  // Для постов
  const postInput = document.getElementById('post-input');
  const postFileInput = document.getElementById('post-file-input'); // Поле для файлов в постах
  const publishPostButton = document.getElementById('publish-post');
  const postsSection = document.getElementById('posts-container'); // Секция постов
  const clearChatButton = document.getElementById('clear-chat');

  sendMessageButton.addEventListener('click', () => {
    const message = chatInput.value.trim();
    const files = fileInput.files;

    if (message || files.length > 0) {
      const newMessage = document.createElement('div');
      newMessage.classList.add('message');

      const sender = document.createElement('strong');
      sender.textContent = `${userNickname}: `;
      newMessage.appendChild(sender);

      if (message) {
        const text = document.createElement('span');
        text.textContent = message;
        newMessage.appendChild(text);
      }

      if (files.length > 0) {
        const gallery = document.createElement('div');
        gallery.classList.add('image-gallery');

        Array.from(files).forEach(file => {
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();

            reader.onload = (e) => {
              const img = document.createElement('img');
              img.src = e.target.result;
              gallery.appendChild(img);
            };

            reader.readAsDataURL(file);
          } else {
            const fileLink = document.createElement('a');
            fileLink.href = URL.createObjectURL(file);
            fileLink.textContent = `Download ${file.name}`;
            fileLink.classList.add('file-link');
            gallery.appendChild(fileLink);
          }
        });

        newMessage.appendChild(gallery);
      }

      chatBox.appendChild(newMessage);
      chatInput.value = '';
      fileInput.value = '';
      chatBox.scrollTop = chatBox.scrollHeight;
    } else {
      alert('Please enter a message or select a file.');
    }
  });

  // Публикация постов
  publishPostButton.addEventListener('click', () => {
    const postMessage = postInput.value.trim();
    const postFiles = postFileInput.files;

    if (postMessage || postFiles.length > 0) {
      const newPost = document.createElement('div');
      newPost.classList.add('post');

      const postSender = document.createElement('strong');
      postSender.textContent = `${userNickname}: `;
      newPost.appendChild(postSender);

      if (postMessage) {
        const postText = document.createElement('span');
        postText.textContent = postMessage;
        newPost.appendChild(postText);
      }

      if (postFiles.length > 0) {
        const postGallery = document.createElement('div');
        postGallery.classList.add('image-gallery');

        Array.from(postFiles).forEach(file => {
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();

            reader.onload = (e) => {
              const img = document.createElement('img');
              img.src = e.target.result;
              postGallery.appendChild(img);
            };

            reader.readAsDataURL(file);
          } else {
            const fileLink = document.createElement('a');
            fileLink.href = URL.createObjectURL(file);
            fileLink.textContent = `Download ${file.name}`;
            fileLink.classList.add('file-link');
            postGallery.appendChild(fileLink);
          }
        });

        newPost.appendChild(postGallery);
      }

      postsSection.appendChild(newPost);
      postInput.value = '';
      postFileInput.value = '';
      postsSection.scrollTop = postsSection.scrollHeight;
    } else {
      alert('Please enter a message or select a file.');
    }
  });

  clearChatButton.addEventListener('click', () => {
    chatBox.innerHTML = '';
    alert('Chat cleared.');
  });
  
  // Дополнительные функции для переключения между постами и чатом
  const openChatsButton = document.getElementById('open-chats');
  const openChannelsButton = document.getElementById('open-channels');
  const backToPostsButton = document.getElementById('back-to-posts');
  const backToPostsChannelsButton = document.getElementById('back-to-posts-channels');
  const channelsContainer = document.getElementById('channels-container');

  openChatsButton.addEventListener('click', () => {
    document.getElementById('chat-container').style.display = 'block';
    document.getElementById('channels-container').style.display = 'none';
    postsSection.style.display = 'none';
  });

  openChannelsButton.addEventListener('click', () => {
    channelsContainer.style.display = 'block';
    document.getElementById('chat-container').style.display = 'none';
    postsSection.style.display = 'none';
  });

  backToPostsButton.addEventListener('click', () => {
    document.getElementById('chat-container').style.display = 'none';
    postsSection.style.display = 'block';
  });

  backToPostsChannelsButton.addEventListener('click', () => {
    channelsContainer.style.display = 'none';
    postsSection.style.display = 'block';
  });
});

main.js

// main.js

// Открытие модального окна
function openModal() {
  const modal = document.getElementById("myModal");
  modal.style.display = "block";
}

// Закрытие модального окна
function closeModal() {
  const modal = document.getElementById("myModal");
  modal.style.display = "none";
}

// Закрытие модального окна при клике вне его
window.onclick = function (event) {
  const modal = document.getElementById("myModal");
  if (event.target === modal) {
    modal.style.display = "none";
  }
};

// Функция для отправки сообщения
function sendMessage() {
  const messageInput = document.getElementById("chat-input");
  const message = messageInput.value.trim();

  if (message !== "") {
    const chatBox = document.getElementById("chat-box");
    const newMessage = document.createElement("div");
    newMessage.classList.add("message");
    newMessage.textContent = message;
    chatBox.appendChild(newMessage);

    messageInput.value = ""; // Очистить поле ввода
    chatBox.scrollTop = chatBox.scrollHeight; // Прокрутка вниз
  }
}

// Обработчик клика для отправки сообщения
document.getElementById("send-message").addEventListener("click", sendMessage);

// Отправка сообщения по нажатию Enter
document.getElementById("chat-input").addEventListener("keypress", function (e) {
  if (e.key === "Enter") {
    sendMessage();
  }
});

// Открытие профиля
document.getElementById("profile-pic").addEventListener("click", function () {
  const profileContainer = document.getElementById("profile-container");
  profileContainer.style.display = "block";
});

// Закрытие профиля
document.getElementById("back-profile").addEventListener("click", function () {
  const profileContainer = document.getElementById("profile-container");
  profileContainer.style.display = "none";
});

// Открытие меню настроек
document.getElementById("settings-icon").addEventListener("click", function () {
  const settingsMenu = document.querySelector("aside");
  settingsMenu.classList.toggle("active");
});

// Обработчик темной темы
function toggleDarkTheme() {
  document.body.classList.toggle("dark-theme");
}

// Сохранение темы при переключении
document.addEventListener('DOMContentLoaded', () => {
  const currentTheme = localStorage.getItem('theme');
  if (currentTheme === 'dark') {
    document.body.classList.add('dark-theme');
  }

  document.getElementById("toggle-theme").addEventListener("click", () => {
    toggleDarkTheme();

    const theme = document.body.classList.contains('dark-theme') ? 'dark' : 'light';
    localStorage.setItem('theme', theme);
  });
});

// Добавление поста
function publishPost() {
  const postInput = document.getElementById("post-input");
  const postText = postInput.value.trim();

  if (postText !== "") {
    const postSection = document.getElementById("posts-section");
    const newPost = document.createElement("div");
    newPost.classList.add("post");
    newPost.textContent = postText;
    postSection.appendChild(newPost);

    postInput.value = ""; // Очистить поле ввода
  }
}

// Обработчик публикации поста
document.getElementById("publish-post").addEventListener("click", publishPost);

posts.js

document.addEventListener('DOMContentLoaded', () => {
  const postInput = document.getElementById('post-input');
  const publishPostButton = document.getElementById('publish-post');

  publishPostButton.addEventListener('click', () => {
    const postContent = postInput.value.trim();

    if (postContent) {
      const postElement = document.createElement('div');
      postElement.textContent = postContent;
      document.body.appendChild(postElement);
      postInput.value = '';
      alert('Post published.');
    } else {
      alert('Please enter something to post.');
    }
  });
});

profile.js

document.addEventListener('DOMContentLoaded', () => {
  const profilePic = document.getElementById('profile-pic');
  const profileMenu = document.getElementById('profile-menu');
  const saveProfileButton = document.getElementById('save-profile');
  const avatarUpload = document.getElementById('avatar-upload');

  // Открытие/закрытие меню профиля по клику на аватар
  profilePic.addEventListener('click', () => {
    profileMenu.classList.toggle('active');
  });

  // Сохранение изменений профиля
  saveProfileButton.addEventListener('click', () => {
    const newName = document.getElementById('edit-name').value;
    const newNickname = document.getElementById('edit-nickname').value;

    if (newName) {
      // Если загружен новый аватар, то устанавливаем его
      if (avatarUpload.files.length > 0) {
        profilePic.src = URL.createObjectURL(avatarUpload.files[0]);
      } else {
        profilePic.src = 'images/default-avatar.png'; // Если нет, устанавливаем аватар по умолчанию
      }

      alert(`Profile saved. Name: ${newName}, Nickname: ${newNickname}`);
    } else {
      alert('Please enter a name.');
    }

    // Закрытие меню профиля
    profileMenu.classList.remove('active');
  });
});

scripts.js

// Получаем модальное окно и элементы
var modal = document.getElementById("profile-modal");
var avatar = document.getElementById("profile-pic"); // ID для аватара
var span = document.getElementsByClassName("close")[0];

// Открытие модального окна при клике на аватарку
avatar.onclick = function() {
  modal.style.display = "block";
}

// Закрытие окна при клике на "x"
span.onclick = function() {
  modal.style.display = "none";
}

// Закрытие окна при клике вне его
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}

// Функция для смены шапки профиля
function changeProfileBanner(event) {
  const bannerImg = document.getElementById('profile-banner-img');
  const file = event.target.files[0];
  
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      bannerImg.src = e.target.result;
    }
    reader.readAsDataURL(file);
  }
}

// Добавим обработчик для загрузки изображения шапки
document.getElementById('banner-upload').addEventListener('change', changeProfileBanner);

// Функция для смены аватара профиля
function changeProfileAvatar(event) {
  const avatarImg = document.getElementById('profile-pic'); // ID для изображения аватара
  const file = event.target.files[0];
  
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      avatarImg.src = e.target.result;
    }
    reader.readAsDataURL(file);
  }
}

// Добавим обработчик для загрузки аватара
document.getElementById('avatar-upload').addEventListener('change', changeProfileAvatar);

settings.js

document.addEventListener('DOMContentLoaded', () => {
  const toggleThemeButton = document.getElementById('toggle-theme');

  // Сохранение выбранной темы в локальное хранилище
  const currentTheme = localStorage.getItem('theme');
  if (currentTheme === 'dark') {
    document.body.classList.add('dark-theme');
  }

  toggleThemeButton.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');

    // Обновление темы в локальном хранилище
    if (document.body.classList.contains('dark-theme')) {
      localStorage.setItem('theme', 'dark');
    } else {
      localStorage.setItem('theme', 'light');
    }
  });
});

voice.js

let mediaRecorder;
let audioChunks = [];

export async function startRecording(stream) {
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    console.log('Recording started.');

    mediaRecorder.addEventListener("dataavailable", event => {
        audioChunks.push(event.data);
        console.log('Audio chunk available.');
    });

    mediaRecorder.addEventListener("stop", () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/mp3' });
        const audioUrl = URL.createObjectURL(audioBlob);
        audioChunks = []; // очистка массива для следующей записи
        console.log('Recording stopped.');

        // Здесь можно вызвать функцию для отображения или сохранения аудио
        displayVoiceMessage(audioUrl);
    });
}

export function stopRecording() {
    if (mediaRecorder) {
        mediaRecorder.stop();
        console.log('Stopping recording...');
    }
}

function displayVoiceMessage(audioUrl) {
    const voiceMessagesList = document.getElementById('voice-messages-list');
    const audioElement = document.createElement('audio');
    audioElement.controls = true;
    audioElement.src = audioUrl;
    voiceMessagesList.appendChild(audioElement);
    console.log('Voice message displayed.');
}

voiceMessages.js

import { startRecording, stopRecording } from './voice.js';

const toggleRecordVoiceButton = document.getElementById('toggle-record-voice');
let recording = false;

toggleRecordVoiceButton.addEventListener('click', async () => {
    try {
        if (!recording) {
            console.log('Requesting audio stream...');
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            console.log('Audio stream obtained.');
            await startRecording(stream);
            recording = true;
            toggleRecordVoiceButton.innerText = '⏹ Stop Recording';
        } else {
            stopRecording();
            recording = false;
            toggleRecordVoiceButton.innerText = '🎤 Start Recording';
        }
    } catch (error) {
        console.error('Error accessing audio stream:', error);
        alert('Could not access microphone. Please check permissions.');
    }
});
